@startuml
'https://plantuml.com/sequence-diagram

class PlotStyle <<sealed>> {
    val yIdx: List<Int>
    val z: List<Int>
    
    fun IPlotDrawScope.draw(items: List<PlotSeriesItem>, requestedZ: Int, plot: SinglePlot)
}

abstract class SinglePlotStyle {
    {abstract} fun IPlotDrawScope.draw(x: Double, y: List<Double?>, requestedZ: Int, plot: SinglePlot)
}
PlotStyle +-- SinglePlotStyle

abstract class SeriesPlotStyle {
    {abstract} fun IPlotDrawScope.draw(items: Map<Double, List<Double?>>, requestedZ: Int, plot: SinglePlot)
}
PlotStyle +--- SeriesPlotStyle

class Dots extends SinglePlotStyle
class CandleSticks extends SinglePlotStyle
class Label extends SinglePlotStyle
class Impulse extends SinglePlotStyle
class SingleGroup extends SinglePlotStyle
class Focusable extends SingleGroup

class Line extends SeriesPlotStyle
class Fill extends SeriesPlotStyle
class SeriesGroup extends SeriesPlotStyle


class PlotSeries <<data>> {
    val items: List<PlotSeriesItem>
    val styles: List<SeriesPlotStyle>
    ---
    val xRange: ClosedRange<Double>
    val yRange: ClosedRange<Double>?
}
PlotSeries ---> SeriesPlotStyle

class PlotSeriesItem <<data>> {
    val x: Double
    val y: Map<Int, Double?>
    val styles: List<SinglePlotStyle>
    ---
    var focused: Boolean
    val yRange: ClosedRange<Double>?
}
PlotSeries --> PlotSeriesItem
PlotSeriesItem --> SinglePlotStyle

@enduml